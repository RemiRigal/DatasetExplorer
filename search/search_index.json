{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dataset Explorer Dataset Explorer is a web tool for local dataset browsing and processing developped using the Flask + Angular stack. Features Dataset Explorer provides the following features: Web-based (local server) Light weight and powerful (handle 100k+ files like a breeze) Easy visualization of data Plugin-based tool system for easy custom data processing Getting Started You can get started with Dataset Explorer: Using Docker Building directly from source In both cases, the app will be available by default at http://127.0.0.1:4200 .","title":"Home"},{"location":"#dataset-explorer","text":"Dataset Explorer is a web tool for local dataset browsing and processing developped using the Flask + Angular stack.","title":"Dataset Explorer"},{"location":"#features","text":"Dataset Explorer provides the following features: Web-based (local server) Light weight and powerful (handle 100k+ files like a breeze) Easy visualization of data Plugin-based tool system for easy custom data processing","title":"Features"},{"location":"#getting-started","text":"You can get started with Dataset Explorer: Using Docker Building directly from source In both cases, the app will be available by default at http://127.0.0.1:4200 .","title":"Getting Started"},{"location":"contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. For bug reports, feature requests, and feedback, simply create a new issue. Try to be as descriptive as possible.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. For bug reports, feature requests, and feedback, simply create a new issue. Try to be as descriptive as possible.","title":"Contributing"},{"location":"custom-tools/","text":"Custom tools Writing custom tools Dataset Explorer allows you to write custom Python tools so that you can instantly test your own processing pipeline on your data. To do so you simply need to create a class that inherits the BasePlugin class and complies with the tools guidelines . Registering your tools All python files that define tools must be placed either at ~/.DatasetExplorer/plugins , or at any directory listed in the environment variable DATASET_EXPLORER_PLUGINS (separated by : ).","title":"Custom Tools"},{"location":"custom-tools/#custom-tools","text":"","title":"Custom tools"},{"location":"custom-tools/#writing-custom-tools","text":"Dataset Explorer allows you to write custom Python tools so that you can instantly test your own processing pipeline on your data. To do so you simply need to create a class that inherits the BasePlugin class and complies with the tools guidelines .","title":"Writing custom tools"},{"location":"custom-tools/#registering-your-tools","text":"All python files that define tools must be placed either at ~/.DatasetExplorer/plugins , or at any directory listed in the environment variable DATASET_EXPLORER_PLUGINS (separated by : ).","title":"Registering your tools"},{"location":"custom-tools/api/","text":"Tools API Documentation AudioPlugin Convenience base class for plugins having audio as input type. sr class-attribute PluginParameter instance holding the sample rate at which the audio file must be loaded, the original sample rate is used if set to 0 __call__ ( self , inFilename , outFilename ) special Internal call of the plugin, loads the plugin if necessary, then loads the input audio file and calls the process method. Parameters: Name Type Description Default inFilename str The path of the file to be processed required outFilename str The path to which the processed file must be written required Source code in dataset_explorer/plugins/base.py 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 def __call__ ( self , inFilename : str , outFilename : str ): \"\"\" Internal call of the plugin, loads the plugin if necessary, then loads the input audio file and calls the `process` method. Args: inFilename: The path of the file to be processed outFilename: The path to which the processed file must be written \"\"\" if not self . _loaded : self . load () self . _loaded = True loadSr = self . sr . value if self . sr . value else None data , self . sr . value = librosa . load ( inFilename , sr = loadSr ) self . process ( data , outFilename ) __init__ ( self , name , outType , icon = 'settings' , outExtension = '' ) special Creates a AudioPlugin instance. Parameters: Name Type Description Default name str The name is the plugin as it will be displayed within the web interface required outType FileType The output type of the plugin required icon Optional[str] The name of the icon, must be one of the Angular Material Icon list 'settings' outExtension Optional[str] If specified, overrides the default file extension for the provided output file '' Note Default file extensions for each type are: Image: .png Audio: .wav Video: .mp4 Text: .txt Misc: no extension Source code in dataset_explorer/plugins/base.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 def __init__ ( self , name : str , outType : FileType , icon : Optional [ str ] = 'settings' , outExtension : Optional [ str ] = '' ): \"\"\" Creates a AudioPlugin instance. Args: name: The name is the plugin as it will be displayed within the web interface outType: The output type of the plugin icon: The name of the icon, must be one of the Angular Material Icon list outExtension: If specified, overrides the default file extension for the provided output file Note: Default file extensions for each type are: - Image: .png - Audio: .wav - Video: .mp4 - Text: .txt - Misc: _no extension_ \"\"\" super ( AudioPlugin , self ) . __init__ ( name , FileType . AUDIO , outType , icon , outExtension ) process ( self , data , outFilename ) The main entrypoint of audio plugins, must be overriden in child class. The processed file must be saved at the path pointed by the argument outFilename . Parameters: Name Type Description Default data ndarray The audio signal as a numpy ndarray required outFilename str The path to which the processed file must be written required Source code in dataset_explorer/plugins/base.py 205 206 207 208 209 210 211 212 213 214 def process ( self , data : np . ndarray , outFilename : str ): \"\"\" The main entrypoint of audio plugins, must be overriden in child class. The processed file must be saved at the path pointed by the argument `outFilename`. Args: data: The audio signal as a numpy ndarray outFilename: The path to which the processed file must be written \"\"\" raise NotImplementedError BasePlugin Base class for plugins. __call__ ( self , inFilename , outFilename ) special Internal call of the plugin, loads the plugin if necessary and calls the process method. Parameters: Name Type Description Default inFilename str The path of the file to be processed required outFilename str The path to which the processed file must be written required Source code in dataset_explorer/plugins/base.py 112 113 114 115 116 117 118 119 120 121 122 123 def __call__ ( self , inFilename : str , outFilename : str ): \"\"\" Internal call of the plugin, loads the plugin if necessary and calls the `process` method. Args: inFilename: The path of the file to be processed outFilename: The path to which the processed file must be written \"\"\" if not self . _loaded : self . load () self . _loaded = True self . process ( inFilename , outFilename ) __init__ ( self , name , inType , outType , icon = 'settings' , outExtension = '' ) special Creates a BasePlugin instance. Parameters: Name Type Description Default name str The name is the plugin as it will be displayed within the web interface required inType FileType The input type of the plugin required outType FileType The output type of the plugin required icon Optional[str] The name of the icon, must be one of the Angular Material Icon list 'settings' outExtension Optional[str] If specified, overrides the default file extension for the provided output file '' Note Default file extensions for each type are: Image: .png Audio: .wav Video: .mp4 Text: .txt Misc: no extension Source code in dataset_explorer/plugins/base.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def __init__ ( self , name : str , inType : FileType , outType : FileType , icon : Optional [ str ] = 'settings' , outExtension : Optional [ str ] = '' ): \"\"\" Creates a BasePlugin instance. Args: name: The name is the plugin as it will be displayed within the web interface inType: The input type of the plugin outType: The output type of the plugin icon: The name of the icon, must be one of the Angular Material Icon list outExtension: If specified, overrides the default file extension for the provided output file Note: Default file extensions for each type are: - Image: .png - Audio: .wav - Video: .mp4 - Text: .txt - Misc: _no extension_ \"\"\" self . name = name self . inType = inType self . outType = outType self . parameters = self . _retrieveParameters ( self . __class__ , list ()) self . icon = icon if outExtension : self . outExtension = f \". { outExtension . replace ( '.' , '' ) } \" else : self . outExtension = FileType . getDefaultExtension ( self . outType ) self . _loaded = False getFileHash ( self , dataFile , params ) Computes and returns a unique hash for the three elements: Plugin Input data file Parameters Allows for caching already processed files. Parameters: Name Type Description Default dataFile DataFile The DataFile instance of the file to process required params dict The user-specified parameters required Returns: Type Description int A unique hash for the combination (Plugin + File + Params) Source code in dataset_explorer/plugins/base.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def getFileHash ( self , dataFile : DataFile , params : dict ) -> int : \"\"\" Computes and returns a unique hash for the three elements: - Plugin - Input data file - Parameters Allows for caching already processed files. Args: dataFile: The DataFile instance of the file to process params: The user-specified parameters Returns: A unique hash for the combination (Plugin + File + Params) \"\"\" parametersCopy = { name : parameter . value for name , parameter in self . parameters . items ()} parametersCopy . update ( params ) parametersCopy [ \"__datafile\" ] = dataFile . id parametersCopy [ \"__plugin\" ] = self . name return hash ( frozenset ( parametersCopy . items ())) load ( self ) Can be overriden in child class. Will be called automatically once before the first call to process is issued. Source code in dataset_explorer/plugins/base.py 125 126 127 128 129 def load ( self ): \"\"\" Can be overriden in child class. Will be called automatically once before the first call to `process` is issued. \"\"\" pass process ( self , inFilename , outFilename ) The main entrypoint of plugins, must be overriden in child class. The processed file must be saved at the path pointed by the argument outFilename . Parameters: Name Type Description Default inFilename str The path of the file to be processed required outFilename str The path to which the processed file must be written required Source code in dataset_explorer/plugins/base.py 131 132 133 134 135 136 137 138 139 140 def process ( self , inFilename : str , outFilename : str ): \"\"\" The main entrypoint of plugins, must be overriden in child class. The processed file must be saved at the path pointed by the argument `outFilename`. Args: inFilename: The path of the file to be processed outFilename: The path to which the processed file must be written \"\"\" raise NotImplementedError setParameterValues ( self , params ) Overrides the values of all the parameters of the plugin to match the user-specified params dict. If not specified, they are set to their default value. Parameters: Name Type Description Default params dict The user-specified params dict. The syntax of the latter is: { \"paramName1\" : value , \"paramName2\" : value } required Source code in dataset_explorer/plugins/base.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def setParameterValues ( self , params : dict ): \"\"\" Overrides the values of all the parameters of the plugin to match the user-specified params dict. If not specified, they are set to their default value. Args: params: The user-specified params dict. The syntax of the latter is: ```python { \"paramName1\": value, \"paramName2\": value } ``` \"\"\" for parameter in self . parameters . values (): parameter . reset () for name , value in params . items (): self . parameters [ name ] . value = value toJson ( self ) Generates and returns the JSON representation of the plugin. Returns: Type Description dict The JSON representation of the plugin as a dict Source code in dataset_explorer/plugins/base.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 def toJson ( self ) -> dict : \"\"\" Generates and returns the JSON representation of the plugin. Returns: The JSON representation of the plugin as a dict \"\"\" return { \"className\" : self . __class__ . __name__ , \"name\" : self . name , \"inType\" : self . inType . value , \"outType\" : self . outType . value , \"parameters\" : [ parameter . toJson ( name ) for name , parameter in self . parameters . items ()], \"icon\" : self . icon } ImagePlugin Convenience base class for plugins having image as input type. __call__ ( self , inFilename , outFilename ) special Internal call of the plugin, loads the plugin if necessary, then loads the input image file and calls the process method. Parameters: Name Type Description Default inFilename The path of the file to be processed required outFilename The path to which the processed file must be written required Source code in dataset_explorer/plugins/base.py 243 244 245 246 247 248 249 250 251 252 253 254 255 256 def __call__ ( self , inFilename , outFilename ): \"\"\" Internal call of the plugin, loads the plugin if necessary, then loads the input image file and calls the `process` method. Args: inFilename: The path of the file to be processed outFilename: The path to which the processed file must be written \"\"\" if not self . _loaded : self . load () self . _loaded = True data = cv2 . imread ( inFilename ) self . process ( data , outFilename ) __init__ ( self , name , outType , icon = 'settings' , outExtension = '' ) special Creates a ImagePlugin instance. Parameters: Name Type Description Default name str The name is the plugin as it will be displayed within the web interface required outType FileType The output type of the plugin required icon Optional[str] The name of the icon, must be one of the Angular Material Icon list 'settings' outExtension Optional[str] If specified, overrides the default file extension for the provided output file '' Note Default file extensions for each type are: Image: .png Audio: .wav Video: .mp4 Text: .txt Misc: no extension Source code in dataset_explorer/plugins/base.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 def __init__ ( self , name : str , outType : FileType , icon : Optional [ str ] = 'settings' , outExtension : Optional [ str ] = '' ): \"\"\" Creates a ImagePlugin instance. Args: name: The name is the plugin as it will be displayed within the web interface outType: The output type of the plugin icon: The name of the icon, must be one of the Angular Material Icon list outExtension: If specified, overrides the default file extension for the provided output file Note: Default file extensions for each type are: - Image: .png - Audio: .wav - Video: .mp4 - Text: .txt - Misc: _no extension_ \"\"\" super ( ImagePlugin , self ) . __init__ ( name , FileType . IMAGE , outType , icon , outExtension ) process ( self , data , outFilename ) The main entrypoint of image plugins, must be overriden in child class. The processed file must be saved at the path pointed by the argument outFilename . Parameters: Name Type Description Default data ndarray The image as a numpy ndarray required outFilename The path to which the processed file must be written required Source code in dataset_explorer/plugins/base.py 258 259 260 261 262 263 264 265 266 267 def process ( self , data : np . ndarray , outFilename ): \"\"\" The main entrypoint of image plugins, must be overriden in child class. The processed file must be saved at the path pointed by the argument `outFilename`. Args: data: The image as a numpy ndarray outFilename: The path to which the processed file must be written \"\"\" raise NotImplementedError PluginParameter User-editable parameter for plugins. __init__ ( self , name , value ) special Create a PluginParameter instance. Parameters: Name Type Description Default name str The name of the parameter, it will be displayed within the web interface required value Union[int, float, str, bool] The default value of the parameter required Source code in dataset_explorer/plugins/parameters.py 12 13 14 15 16 17 18 19 20 21 22 def __init__ ( self , name : str , value : Union [ int , float , str , bool ]): \"\"\" Create a PluginParameter instance. Args: name: The name of the parameter, it will be displayed within the web interface value: The default value of the parameter \"\"\" self . name = name self . value = value self . _defaultValue = value reset ( self ) Sets back the value of the parameter to its default value. Source code in dataset_explorer/plugins/parameters.py 24 25 26 27 28 def reset ( self ): \"\"\" Sets back the value of the parameter to its default value. \"\"\" self . value = self . _defaultValue toJson ( self , attributeName ) Generates and returns the JSON representation of the parameter. Parameters: Name Type Description Default attributeName str The name of the Python instance required Returns: Type Description dict The JSON representation of the parameter as a dict Source code in dataset_explorer/plugins/parameters.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def toJson ( self , attributeName : str ) -> dict : \"\"\" Generates and returns the JSON representation of the parameter. Args: attributeName: The name of the Python instance Returns: The JSON representation of the parameter as a dict \"\"\" return { \"attributeName\" : attributeName , \"name\" : self . name , \"value\" : self . _defaultValue , \"default\" : self . _defaultValue , \"type\" : type ( self . value ) . __name__ } InstantiationError Raised when a plugins fails to instantiate InvalidParameter Raised when an invalid parameter is passed to a Plugin instance OutputFileNotFound Raised when the output file of a plugin does not exist PluginError Raised when a plugin-based exception occurs ProcessError Raised when a plugin failed to process some data","title":"Tools API"},{"location":"custom-tools/api/#tools-api-documentation","text":"","title":"Tools API Documentation"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.AudioPlugin","text":"Convenience base class for plugins having audio as input type.","title":"AudioPlugin"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.AudioPlugin.sr","text":"PluginParameter instance holding the sample rate at which the audio file must be loaded, the original sample rate is used if set to 0","title":"sr"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.AudioPlugin.__call__","text":"Internal call of the plugin, loads the plugin if necessary, then loads the input audio file and calls the process method. Parameters: Name Type Description Default inFilename str The path of the file to be processed required outFilename str The path to which the processed file must be written required Source code in dataset_explorer/plugins/base.py 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 def __call__ ( self , inFilename : str , outFilename : str ): \"\"\" Internal call of the plugin, loads the plugin if necessary, then loads the input audio file and calls the `process` method. Args: inFilename: The path of the file to be processed outFilename: The path to which the processed file must be written \"\"\" if not self . _loaded : self . load () self . _loaded = True loadSr = self . sr . value if self . sr . value else None data , self . sr . value = librosa . load ( inFilename , sr = loadSr ) self . process ( data , outFilename )","title":"__call__()"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.AudioPlugin.__init__","text":"Creates a AudioPlugin instance. Parameters: Name Type Description Default name str The name is the plugin as it will be displayed within the web interface required outType FileType The output type of the plugin required icon Optional[str] The name of the icon, must be one of the Angular Material Icon list 'settings' outExtension Optional[str] If specified, overrides the default file extension for the provided output file '' Note Default file extensions for each type are: Image: .png Audio: .wav Video: .mp4 Text: .txt Misc: no extension Source code in dataset_explorer/plugins/base.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 def __init__ ( self , name : str , outType : FileType , icon : Optional [ str ] = 'settings' , outExtension : Optional [ str ] = '' ): \"\"\" Creates a AudioPlugin instance. Args: name: The name is the plugin as it will be displayed within the web interface outType: The output type of the plugin icon: The name of the icon, must be one of the Angular Material Icon list outExtension: If specified, overrides the default file extension for the provided output file Note: Default file extensions for each type are: - Image: .png - Audio: .wav - Video: .mp4 - Text: .txt - Misc: _no extension_ \"\"\" super ( AudioPlugin , self ) . __init__ ( name , FileType . AUDIO , outType , icon , outExtension )","title":"__init__()"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.AudioPlugin.process","text":"The main entrypoint of audio plugins, must be overriden in child class. The processed file must be saved at the path pointed by the argument outFilename . Parameters: Name Type Description Default data ndarray The audio signal as a numpy ndarray required outFilename str The path to which the processed file must be written required Source code in dataset_explorer/plugins/base.py 205 206 207 208 209 210 211 212 213 214 def process ( self , data : np . ndarray , outFilename : str ): \"\"\" The main entrypoint of audio plugins, must be overriden in child class. The processed file must be saved at the path pointed by the argument `outFilename`. Args: data: The audio signal as a numpy ndarray outFilename: The path to which the processed file must be written \"\"\" raise NotImplementedError","title":"process()"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.BasePlugin","text":"Base class for plugins.","title":"BasePlugin"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.BasePlugin.__call__","text":"Internal call of the plugin, loads the plugin if necessary and calls the process method. Parameters: Name Type Description Default inFilename str The path of the file to be processed required outFilename str The path to which the processed file must be written required Source code in dataset_explorer/plugins/base.py 112 113 114 115 116 117 118 119 120 121 122 123 def __call__ ( self , inFilename : str , outFilename : str ): \"\"\" Internal call of the plugin, loads the plugin if necessary and calls the `process` method. Args: inFilename: The path of the file to be processed outFilename: The path to which the processed file must be written \"\"\" if not self . _loaded : self . load () self . _loaded = True self . process ( inFilename , outFilename )","title":"__call__()"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.BasePlugin.__init__","text":"Creates a BasePlugin instance. Parameters: Name Type Description Default name str The name is the plugin as it will be displayed within the web interface required inType FileType The input type of the plugin required outType FileType The output type of the plugin required icon Optional[str] The name of the icon, must be one of the Angular Material Icon list 'settings' outExtension Optional[str] If specified, overrides the default file extension for the provided output file '' Note Default file extensions for each type are: Image: .png Audio: .wav Video: .mp4 Text: .txt Misc: no extension Source code in dataset_explorer/plugins/base.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def __init__ ( self , name : str , inType : FileType , outType : FileType , icon : Optional [ str ] = 'settings' , outExtension : Optional [ str ] = '' ): \"\"\" Creates a BasePlugin instance. Args: name: The name is the plugin as it will be displayed within the web interface inType: The input type of the plugin outType: The output type of the plugin icon: The name of the icon, must be one of the Angular Material Icon list outExtension: If specified, overrides the default file extension for the provided output file Note: Default file extensions for each type are: - Image: .png - Audio: .wav - Video: .mp4 - Text: .txt - Misc: _no extension_ \"\"\" self . name = name self . inType = inType self . outType = outType self . parameters = self . _retrieveParameters ( self . __class__ , list ()) self . icon = icon if outExtension : self . outExtension = f \". { outExtension . replace ( '.' , '' ) } \" else : self . outExtension = FileType . getDefaultExtension ( self . outType ) self . _loaded = False","title":"__init__()"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.BasePlugin.getFileHash","text":"Computes and returns a unique hash for the three elements: Plugin Input data file Parameters Allows for caching already processed files. Parameters: Name Type Description Default dataFile DataFile The DataFile instance of the file to process required params dict The user-specified parameters required Returns: Type Description int A unique hash for the combination (Plugin + File + Params) Source code in dataset_explorer/plugins/base.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def getFileHash ( self , dataFile : DataFile , params : dict ) -> int : \"\"\" Computes and returns a unique hash for the three elements: - Plugin - Input data file - Parameters Allows for caching already processed files. Args: dataFile: The DataFile instance of the file to process params: The user-specified parameters Returns: A unique hash for the combination (Plugin + File + Params) \"\"\" parametersCopy = { name : parameter . value for name , parameter in self . parameters . items ()} parametersCopy . update ( params ) parametersCopy [ \"__datafile\" ] = dataFile . id parametersCopy [ \"__plugin\" ] = self . name return hash ( frozenset ( parametersCopy . items ()))","title":"getFileHash()"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.BasePlugin.load","text":"Can be overriden in child class. Will be called automatically once before the first call to process is issued. Source code in dataset_explorer/plugins/base.py 125 126 127 128 129 def load ( self ): \"\"\" Can be overriden in child class. Will be called automatically once before the first call to `process` is issued. \"\"\" pass","title":"load()"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.BasePlugin.process","text":"The main entrypoint of plugins, must be overriden in child class. The processed file must be saved at the path pointed by the argument outFilename . Parameters: Name Type Description Default inFilename str The path of the file to be processed required outFilename str The path to which the processed file must be written required Source code in dataset_explorer/plugins/base.py 131 132 133 134 135 136 137 138 139 140 def process ( self , inFilename : str , outFilename : str ): \"\"\" The main entrypoint of plugins, must be overriden in child class. The processed file must be saved at the path pointed by the argument `outFilename`. Args: inFilename: The path of the file to be processed outFilename: The path to which the processed file must be written \"\"\" raise NotImplementedError","title":"process()"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.BasePlugin.setParameterValues","text":"Overrides the values of all the parameters of the plugin to match the user-specified params dict. If not specified, they are set to their default value. Parameters: Name Type Description Default params dict The user-specified params dict. The syntax of the latter is: { \"paramName1\" : value , \"paramName2\" : value } required Source code in dataset_explorer/plugins/base.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def setParameterValues ( self , params : dict ): \"\"\" Overrides the values of all the parameters of the plugin to match the user-specified params dict. If not specified, they are set to their default value. Args: params: The user-specified params dict. The syntax of the latter is: ```python { \"paramName1\": value, \"paramName2\": value } ``` \"\"\" for parameter in self . parameters . values (): parameter . reset () for name , value in params . items (): self . parameters [ name ] . value = value","title":"setParameterValues()"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.BasePlugin.toJson","text":"Generates and returns the JSON representation of the plugin. Returns: Type Description dict The JSON representation of the plugin as a dict Source code in dataset_explorer/plugins/base.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 def toJson ( self ) -> dict : \"\"\" Generates and returns the JSON representation of the plugin. Returns: The JSON representation of the plugin as a dict \"\"\" return { \"className\" : self . __class__ . __name__ , \"name\" : self . name , \"inType\" : self . inType . value , \"outType\" : self . outType . value , \"parameters\" : [ parameter . toJson ( name ) for name , parameter in self . parameters . items ()], \"icon\" : self . icon }","title":"toJson()"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.ImagePlugin","text":"Convenience base class for plugins having image as input type.","title":"ImagePlugin"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.ImagePlugin.__call__","text":"Internal call of the plugin, loads the plugin if necessary, then loads the input image file and calls the process method. Parameters: Name Type Description Default inFilename The path of the file to be processed required outFilename The path to which the processed file must be written required Source code in dataset_explorer/plugins/base.py 243 244 245 246 247 248 249 250 251 252 253 254 255 256 def __call__ ( self , inFilename , outFilename ): \"\"\" Internal call of the plugin, loads the plugin if necessary, then loads the input image file and calls the `process` method. Args: inFilename: The path of the file to be processed outFilename: The path to which the processed file must be written \"\"\" if not self . _loaded : self . load () self . _loaded = True data = cv2 . imread ( inFilename ) self . process ( data , outFilename )","title":"__call__()"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.ImagePlugin.__init__","text":"Creates a ImagePlugin instance. Parameters: Name Type Description Default name str The name is the plugin as it will be displayed within the web interface required outType FileType The output type of the plugin required icon Optional[str] The name of the icon, must be one of the Angular Material Icon list 'settings' outExtension Optional[str] If specified, overrides the default file extension for the provided output file '' Note Default file extensions for each type are: Image: .png Audio: .wav Video: .mp4 Text: .txt Misc: no extension Source code in dataset_explorer/plugins/base.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 def __init__ ( self , name : str , outType : FileType , icon : Optional [ str ] = 'settings' , outExtension : Optional [ str ] = '' ): \"\"\" Creates a ImagePlugin instance. Args: name: The name is the plugin as it will be displayed within the web interface outType: The output type of the plugin icon: The name of the icon, must be one of the Angular Material Icon list outExtension: If specified, overrides the default file extension for the provided output file Note: Default file extensions for each type are: - Image: .png - Audio: .wav - Video: .mp4 - Text: .txt - Misc: _no extension_ \"\"\" super ( ImagePlugin , self ) . __init__ ( name , FileType . IMAGE , outType , icon , outExtension )","title":"__init__()"},{"location":"custom-tools/api/#dataset_explorer.plugins.base.ImagePlugin.process","text":"The main entrypoint of image plugins, must be overriden in child class. The processed file must be saved at the path pointed by the argument outFilename . Parameters: Name Type Description Default data ndarray The image as a numpy ndarray required outFilename The path to which the processed file must be written required Source code in dataset_explorer/plugins/base.py 258 259 260 261 262 263 264 265 266 267 def process ( self , data : np . ndarray , outFilename ): \"\"\" The main entrypoint of image plugins, must be overriden in child class. The processed file must be saved at the path pointed by the argument `outFilename`. Args: data: The image as a numpy ndarray outFilename: The path to which the processed file must be written \"\"\" raise NotImplementedError","title":"process()"},{"location":"custom-tools/api/#dataset_explorer.plugins.parameters.PluginParameter","text":"User-editable parameter for plugins.","title":"PluginParameter"},{"location":"custom-tools/api/#dataset_explorer.plugins.parameters.PluginParameter.__init__","text":"Create a PluginParameter instance. Parameters: Name Type Description Default name str The name of the parameter, it will be displayed within the web interface required value Union[int, float, str, bool] The default value of the parameter required Source code in dataset_explorer/plugins/parameters.py 12 13 14 15 16 17 18 19 20 21 22 def __init__ ( self , name : str , value : Union [ int , float , str , bool ]): \"\"\" Create a PluginParameter instance. Args: name: The name of the parameter, it will be displayed within the web interface value: The default value of the parameter \"\"\" self . name = name self . value = value self . _defaultValue = value","title":"__init__()"},{"location":"custom-tools/api/#dataset_explorer.plugins.parameters.PluginParameter.reset","text":"Sets back the value of the parameter to its default value. Source code in dataset_explorer/plugins/parameters.py 24 25 26 27 28 def reset ( self ): \"\"\" Sets back the value of the parameter to its default value. \"\"\" self . value = self . _defaultValue","title":"reset()"},{"location":"custom-tools/api/#dataset_explorer.plugins.parameters.PluginParameter.toJson","text":"Generates and returns the JSON representation of the parameter. Parameters: Name Type Description Default attributeName str The name of the Python instance required Returns: Type Description dict The JSON representation of the parameter as a dict Source code in dataset_explorer/plugins/parameters.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def toJson ( self , attributeName : str ) -> dict : \"\"\" Generates and returns the JSON representation of the parameter. Args: attributeName: The name of the Python instance Returns: The JSON representation of the parameter as a dict \"\"\" return { \"attributeName\" : attributeName , \"name\" : self . name , \"value\" : self . _defaultValue , \"default\" : self . _defaultValue , \"type\" : type ( self . value ) . __name__ }","title":"toJson()"},{"location":"custom-tools/api/#dataset_explorer.plugins.exceptions.InstantiationError","text":"Raised when a plugins fails to instantiate","title":"InstantiationError"},{"location":"custom-tools/api/#dataset_explorer.plugins.exceptions.InvalidParameter","text":"Raised when an invalid parameter is passed to a Plugin instance","title":"InvalidParameter"},{"location":"custom-tools/api/#dataset_explorer.plugins.exceptions.OutputFileNotFound","text":"Raised when the output file of a plugin does not exist","title":"OutputFileNotFound"},{"location":"custom-tools/api/#dataset_explorer.plugins.exceptions.PluginError","text":"Raised when a plugin-based exception occurs","title":"PluginError"},{"location":"custom-tools/api/#dataset_explorer.plugins.exceptions.ProcessError","text":"Raised when a plugin failed to process some data","title":"ProcessError"},{"location":"custom-tools/guidelines/","text":"Guidelines Any custom tool must comply to the following guidelines: The tool must be defined as a Python class The tool class must inherits from the BasePlugin class (or any of its direct child) The constructor must take no arguments The class must implement the process function The process function must write a file with the provided path outFilename Simple tool example The simplest tool looks like this: # my_custom_plugin.py import cv2 from dataset_explorer.io import FileType from dataset_explorer.plugins import BasePlugin class MyCustomPlugin ( BasePlugin ): \"\"\" MyCustomPlugin inherits from the BasePlugin class \"\"\" def __init__ ( self ): \"\"\" The child class must provide a name as well as the input/output types of the plugin It's required that its constructor takes no argument \"\"\" super ( MyCustomPlugin , self ) . __init__ ( \"MyCustomPlugin\" , FileType . IMAGE , FileType . IMAGE ) def process ( self , inFilename , outFilename ): \"\"\" This method is called automatically, the inFilename argument is the path to the file to process The outFilename is the path to the result file that must be created For example, this function is converting the input image to black and white \"\"\" image = cv2 . imread ( inFilename ) image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) cv2 . imwrite ( outFilename , image ) ImagePlugin and AudioPlugin When dealing with images or audio files, one may want to avoid the reading step by using ImagePlugin or AudioPlugin instead of the BasePlugin class. The input file type is then automatically registered as Image or Audio and the first argument becomes the already loaded data as a numpy array . Here is the above tool refactored to inherit from the ImagePlugin class. # my_custom_plugin.py import cv2 from dataset_explorer.io import FileType from dataset_explorer.plugins import ImagePlugin class MyCustomPlugin ( ImagePlugin ): \"\"\" MyCustomPlugin inherits from the ImagePlugin class \"\"\" def __init__ ( self ): \"\"\" The child class must provide a name as well as the output type of the plugin The input type is already defined as an image as this class inherits from the ImagePlugin class It's required that its constructor takes no argument \"\"\" super ( MyCustomPlugin , self ) . __init__ ( \"MyCustomPlugin\" , FileType . IMAGE ) def process ( self , data , outFilename ): \"\"\" This method is called automatically, the data argument is the image as a numpy array The outFilename is the path to the result file that must be created For example, this function is converting the input image to black and white \"\"\" data = cv2 . cvtColor ( data , cv2 . COLOR_BGR2GRAY ) cv2 . imwrite ( outFilename , data ) Note: The AudioPlugin has a Sample Rate parameter that specifies the sample rate at which the audio must/has been loaded. Loadable tools Most deep learning based algorithm require to load a trained model, this can be accomplished by defining a load function. It will automatically be called once before the first call to the process function is issued. It is important that such operations are defined in the load function instead of the class constructor to avoid memory issues. # my_custom_ai_plugin.py import cv2 from dataset_explorer.io import FileType from dataset_explorer.plugins import BasePlugin from my_deep_learning_model import DeepLearningModel class MyCustomDLPlugin ( BasePlugin ): def __init__ ( self ): super ( MyCustomDLPlugin , self ) . __init__ ( \"MyCustomDLPlugin\" , FileType . IMAGE , FileType . IMAGE ) self . model = None def load ( self ): \"\"\" This method is called automatically once before the first process call is issued \"\"\" self . model = DeepLearningModel () def process ( self , inFilename , outFilename ): image = cv2 . imread ( inFilename ) prediction = self . model . predict ( image ) cv2 . imwrite ( outFilename , prediction )","title":"Guidelines"},{"location":"custom-tools/guidelines/#guidelines","text":"Any custom tool must comply to the following guidelines: The tool must be defined as a Python class The tool class must inherits from the BasePlugin class (or any of its direct child) The constructor must take no arguments The class must implement the process function The process function must write a file with the provided path outFilename","title":"Guidelines"},{"location":"custom-tools/guidelines/#simple-tool-example","text":"The simplest tool looks like this: # my_custom_plugin.py import cv2 from dataset_explorer.io import FileType from dataset_explorer.plugins import BasePlugin class MyCustomPlugin ( BasePlugin ): \"\"\" MyCustomPlugin inherits from the BasePlugin class \"\"\" def __init__ ( self ): \"\"\" The child class must provide a name as well as the input/output types of the plugin It's required that its constructor takes no argument \"\"\" super ( MyCustomPlugin , self ) . __init__ ( \"MyCustomPlugin\" , FileType . IMAGE , FileType . IMAGE ) def process ( self , inFilename , outFilename ): \"\"\" This method is called automatically, the inFilename argument is the path to the file to process The outFilename is the path to the result file that must be created For example, this function is converting the input image to black and white \"\"\" image = cv2 . imread ( inFilename ) image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) cv2 . imwrite ( outFilename , image )","title":"Simple tool example"},{"location":"custom-tools/guidelines/#imageplugin-and-audioplugin","text":"When dealing with images or audio files, one may want to avoid the reading step by using ImagePlugin or AudioPlugin instead of the BasePlugin class. The input file type is then automatically registered as Image or Audio and the first argument becomes the already loaded data as a numpy array . Here is the above tool refactored to inherit from the ImagePlugin class. # my_custom_plugin.py import cv2 from dataset_explorer.io import FileType from dataset_explorer.plugins import ImagePlugin class MyCustomPlugin ( ImagePlugin ): \"\"\" MyCustomPlugin inherits from the ImagePlugin class \"\"\" def __init__ ( self ): \"\"\" The child class must provide a name as well as the output type of the plugin The input type is already defined as an image as this class inherits from the ImagePlugin class It's required that its constructor takes no argument \"\"\" super ( MyCustomPlugin , self ) . __init__ ( \"MyCustomPlugin\" , FileType . IMAGE ) def process ( self , data , outFilename ): \"\"\" This method is called automatically, the data argument is the image as a numpy array The outFilename is the path to the result file that must be created For example, this function is converting the input image to black and white \"\"\" data = cv2 . cvtColor ( data , cv2 . COLOR_BGR2GRAY ) cv2 . imwrite ( outFilename , data ) Note: The AudioPlugin has a Sample Rate parameter that specifies the sample rate at which the audio must/has been loaded.","title":"ImagePlugin and AudioPlugin"},{"location":"custom-tools/guidelines/#loadable-tools","text":"Most deep learning based algorithm require to load a trained model, this can be accomplished by defining a load function. It will automatically be called once before the first call to the process function is issued. It is important that such operations are defined in the load function instead of the class constructor to avoid memory issues. # my_custom_ai_plugin.py import cv2 from dataset_explorer.io import FileType from dataset_explorer.plugins import BasePlugin from my_deep_learning_model import DeepLearningModel class MyCustomDLPlugin ( BasePlugin ): def __init__ ( self ): super ( MyCustomDLPlugin , self ) . __init__ ( \"MyCustomDLPlugin\" , FileType . IMAGE , FileType . IMAGE ) self . model = None def load ( self ): \"\"\" This method is called automatically once before the first process call is issued \"\"\" self . model = DeepLearningModel () def process ( self , inFilename , outFilename ): image = cv2 . imread ( inFilename ) prediction = self . model . predict ( image ) cv2 . imwrite ( outFilename , prediction )","title":"Loadable tools"},{"location":"custom-tools/parameters/","text":"Parameters In order to gain flexibility, a custom tool can define parameters. Those parameters will be editable at runtime within the web interface. Parameters must be instances of the PluginParameter class defined as class attributes. Here is an example of a plugin with parameters: # my_custom_plugin.py import numpy as np from scipy.io import wavfile from dataset_explorer.io import FileType from dataset_explorer.plugins import AudioPlugin , PluginParameter class AddNoisePlugin ( AudioPlugin ): mean = PluginParameter ( \"Mean\" , 0.0 ) std = PluginParameter ( \"Standard Deviation\" , 1.0 ) def __init__ ( self ): super ( AddNoisePlugin , self ) . __init__ ( \"Add Noise\" , FileType . AUDIO ) def process ( self , data , outFilename ): \"\"\" Parameter values are updated with the values specified by the user within the web interface The 'sr' parameter is defined in the AudioPlugin class, its value is the sample rate at which the audio has been loaded \"\"\" noise = np . random . normal ( self . mean . value , self . std . value , data . shape ) wavfile . write ( outFilename , self . sr . value , data + noise )","title":"Using Parameters"},{"location":"custom-tools/parameters/#parameters","text":"In order to gain flexibility, a custom tool can define parameters. Those parameters will be editable at runtime within the web interface. Parameters must be instances of the PluginParameter class defined as class attributes. Here is an example of a plugin with parameters: # my_custom_plugin.py import numpy as np from scipy.io import wavfile from dataset_explorer.io import FileType from dataset_explorer.plugins import AudioPlugin , PluginParameter class AddNoisePlugin ( AudioPlugin ): mean = PluginParameter ( \"Mean\" , 0.0 ) std = PluginParameter ( \"Standard Deviation\" , 1.0 ) def __init__ ( self ): super ( AddNoisePlugin , self ) . __init__ ( \"Add Noise\" , FileType . AUDIO ) def process ( self , data , outFilename ): \"\"\" Parameter values are updated with the values specified by the user within the web interface The 'sr' parameter is defined in the AudioPlugin class, its value is the sample rate at which the audio has been loaded \"\"\" noise = np . random . normal ( self . mean . value , self . std . value , data . shape ) wavfile . write ( outFilename , self . sr . value , data + noise )","title":"Parameters"},{"location":"getting-started/docker/","text":"Using Docker and Docker-Compose A docker compose file is provided, you can start the tool with: docker-compose up -d However, you must mount your dataset directory in the /data directory of the backend container. You can do so by updating the following line of the docker-compose.yml file: volumes : - ./data:/data # Replace '.data/' by the root path to your dataset Note When using docker, custom tools must be mounted under /plugins . Extra Python dependencies may be specified with a requirements.txt file mounted at /plugins/requirements.txt . Those dependencies will be installed at runtime before starting the Flask server.","title":"Using Docker"},{"location":"getting-started/docker/#using-docker-and-docker-compose","text":"A docker compose file is provided, you can start the tool with: docker-compose up -d However, you must mount your dataset directory in the /data directory of the backend container. You can do so by updating the following line of the docker-compose.yml file: volumes : - ./data:/data # Replace '.data/' by the root path to your dataset Note When using docker, custom tools must be mounted under /plugins . Extra Python dependencies may be specified with a requirements.txt file mounted at /plugins/requirements.txt . Those dependencies will be installed at runtime before starting the Flask server.","title":"Using Docker and Docker-Compose"},{"location":"getting-started/from-source/","text":"Building from source Backend (Flask) The backend requires Python 3.7 . cd backend pip install -r requirements.txt export DATASET_EXPLORER_ROOT = /path/to/dataset/root python app.py Frontend (Angular) The frontend requires Angular CLI v9.1.0 and NodeJS v12.16.1 , make sure that they are installed first. cd frontend npm install ng serve --host 0 .0.0.0","title":"From Source"},{"location":"getting-started/from-source/#building-from-source","text":"","title":"Building from source"},{"location":"getting-started/from-source/#backend-flask","text":"The backend requires Python 3.7 . cd backend pip install -r requirements.txt export DATASET_EXPLORER_ROOT = /path/to/dataset/root python app.py","title":"Backend (Flask)"},{"location":"getting-started/from-source/#frontend-angular","text":"The frontend requires Angular CLI v9.1.0 and NodeJS v12.16.1 , make sure that they are installed first. cd frontend npm install ng serve --host 0 .0.0.0","title":"Frontend (Angular)"}]}